<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rental.shinhan.productlist">
	<!-- 상품리스트 필터/정렬/검색 적용 -->

	<select id="selectProductList" parameterType="map" resultType="ProductListVO">
	SELECT
    P.product_seq,
    P.product_serial,
    P.product_name,
    P.product_img,
    P.product_detail,
    P.product_pay,
    P.product_brand,
    P.product_grade,
    P.product_date,
    P.product_height,
    P.product_weight,
    P.product_wh,
    P.product_color,
    P.product_features,
    C.category_name,
    C.category_seq,
    cart_count.product_popularity,
    review_stats.review_count,
    review_stats.review_avg
FROM
    PRODUCT P
LEFT JOIN
    CATEGORY C ON P.category_seq = C.category_seq
LEFT JOIN
    (SELECT product_seq, COUNT(*) AS product_popularity
     FROM cart
     GROUP BY product_seq) cart_count ON P.product_seq = cart_count.product_seq
LEFT JOIN
    (SELECT s.product_seq, COUNT(*) AS review_count, AVG(r.review_rate) AS review_avg
     FROM subscribe s
     JOIN review r ON s.sub_seq = r.sub_seq
     GROUP BY s.product_seq) review_stats ON P.product_seq = review_stats.product_seq
WHERE
    P.product_grade != 'F'
    <if test="category_seq != 0 and category_seq != null">
        AND P.category_seq = #{category_seq}
    </if>
    
  <if test="query != null and query != ''">
    AND (
        to_tsvector('simple', P.product_serial) @@ to_tsquery('simple', #{query})
        OR to_tsvector('simple', P.product_name) @@ to_tsquery('simple', #{query})
        OR to_tsvector('simple', P.product_brand) @@ to_tsquery('simple', #{query})
        OR to_tsvector('simple', P.product_height) @@ to_tsquery('simple', #{query})
        OR to_tsvector('simple', P.product_weight) @@ to_tsquery('simple', #{query})
        OR to_tsvector('simple', P.product_wh) @@ to_tsquery('simple', #{query})
        OR to_tsvector('simple', P.product_color) @@ to_tsquery('simple', #{query})
       	OR to_tsvector('simple', P.product_features) @@ to_tsquery('simple', '#' || #{query})
        OR to_tsvector('simple', C.category_name) @@ to_tsquery('simple', #{query})
    )
</if>
    
    <if test="product_brand != null and product_brand != ''">
        AND P.product_brand = #{product_brand}
    </if>  
 <!-- 가격대 필터 -->
    <if test="priceRange != null">
        AND (
            #{priceRange} LIKE '%below10k%' AND P.product_pay &lt; 10000
            OR #{priceRange} LIKE '%10kTo20k%' AND P.product_pay BETWEEN 10001 AND 20000
            OR #{priceRange} LIKE '%20kTo30k%' AND P.product_pay BETWEEN 20001 AND 30000
            OR #{priceRange} LIKE '%30kTo40k%' AND P.product_pay BETWEEN 30001 AND 40000
            OR #{priceRange} LIKE '%40kTo50k%' AND P.product_pay BETWEEN 40001 AND 50000
            OR #{priceRange} LIKE '%50kTo70k%' AND P.product_pay BETWEEN 50001 AND 70000
            OR #{priceRange} LIKE '%70kTo100k%' AND P.product_pay BETWEEN 70001 AND 100000
            OR #{priceRange} LIKE '%above100k%' AND P.product_pay > 100000
        )
    </if>
    
   <!-- 정렬 필터 defalut:낮은가격순(리스트 처음이 낮은가격순)--> 
<choose>
    <when test="sort == 'Low to High'">
        ORDER BY P.product_pay ASC, P.product_seq ASC
    </when>
    <when test="sort == 'High to Low'">
        ORDER BY P.product_pay DESC, P.product_seq DESC
    </when>
    <when test="sort == 'Release Date'">
        ORDER BY P.product_date DESC, P.product_seq DESC
    </when>
    <when test="sort == 'Avg. Rating'">
        ORDER BY cart_count.product_popularity DESC NULLS LAST, P.product_seq DESC
    </when>
    <otherwise>
        ORDER BY review_stats.review_avg DESC NULLS LAST, P.product_seq DESC
    </otherwise>
</choose>
LIMIT #{size} OFFSET #{offset};
	</select>

	<select id="selectProductDetail" parameterType="int" resultType="ProductListVO">
		SELECT
		P.*,
		C.category_name,
		C.category_seq
		FROM
		PRODUCT P
		LEFT
		JOIN
		CATEGORY C ON P.category_seq = C.category_seq
		where P.product_seq =
		#{product_seq}
	</select>
	
	<!-- 업그레이드 가능 리스트 조회 -->
	<select id="selectUpgradeProductList" parameterType="map" resultType="ProductListVO">
		SELECT 
		    p.product_seq,
		    p.product_name,
		    p.product_brand,
		    p.category_seq,
		    p.product_grade,
		    p.product_date,
		    p.product_serial,
		    p.product_img,
		    p.product_detail,
		    p.product_pay,
		    p.product_height,
		    p.product_weight,
		    p.product_wh,
		    p.product_color,
		    p.product_features,
		    COUNT(r.review_rate) AS review_count, 
		    avg(r.review_rate) AS review_avg
		FROM product p
		LEFT OUTER JOIN  subscribe s USING(product_seq) 
		LEFT JOIN review r USING(sub_seq)
		WHERE 
		    p.product_brand = #{product_brand} 
		    AND p.category_seq = #{category_seq} 
		    AND p.product_grade = #{product_grade} 
		    AND p.product_date >= #{product_date}
		    AND p.product_seq <![CDATA[ <> ]]> #{product_seq}
		GROUP BY 
		    p.product_seq,
		    p.product_name,
		    p.product_brand,
		    p.category_seq,
		    p.product_grade,
		    p.product_date,
		    p.product_serial,
		    p.product_img,
		    p.product_detail,
		    p.product_pay,
		    p.product_height,
		    p.product_weight,
		    p.product_wh,
		    p.product_color,
		    p.product_features
	</select>
	
    
    <select id="selectTotalProductCount" parameterType="map" resultType="int">
SELECT
 COUNT(*)
FROM
    PRODUCT P
LEFT JOIN
    CATEGORY C ON P.category_seq = C.category_seq
WHERE 1=1 AND P.product_grade != 'F' 
    <if test="category_seq != 0 and category_seq != null" >
    AND P.category_seq = #{category_seq}
</if>
    
<if test="query != null and query != ''">
    AND (
        to_tsvector('simple', P.product_serial) @@ to_tsquery('simple', #{query})
        OR to_tsvector('simple', P.product_name) @@ to_tsquery('simple', #{query})
        OR to_tsvector('simple', P.product_brand) @@ to_tsquery('simple', #{query})
        OR to_tsvector('simple', P.product_height) @@ to_tsquery('simple', #{query})
        OR to_tsvector('simple', P.product_weight) @@ to_tsquery('simple', #{query})
        OR to_tsvector('simple', P.product_wh) @@ to_tsquery('simple', #{query})
        OR to_tsvector('simple', P.product_color) @@ to_tsquery('simple', #{query})
 		OR to_tsvector('simple', P.product_features) @@ to_tsquery('simple', '#' || #{query})
        OR to_tsvector('simple', C.category_name) @@ to_tsquery('simple', #{query})
    )
</if>
  <!-- 브랜드 필터 -->
    <if test="product_brand != null and product_brand != '' ">
        AND  
       ( P.product_brand = #{product_brand} 
        )
    </if>
    <!-- 가격대 필터 -->
    <if test="priceRange != null">
        AND (
            #{priceRange} LIKE '%below10k%' AND P.product_pay &lt; 10000
            OR #{priceRange} LIKE '%10kTo20k%' AND P.product_pay BETWEEN 10001 AND 20000
            OR #{priceRange} LIKE '%20kTo30k%' AND P.product_pay BETWEEN 20001 AND 30000
            OR #{priceRange} LIKE '%30kTo40k%' AND P.product_pay BETWEEN 30001 AND 40000
            OR #{priceRange} LIKE '%40kTo50k%' AND P.product_pay BETWEEN 40001 AND 50000
            OR #{priceRange} LIKE '%50kTo70k%' AND P.product_pay BETWEEN 50001 AND 70000
            OR #{priceRange} LIKE '%70kTo100k%' AND P.product_pay BETWEEN 70001 AND 100000
            OR #{priceRange} LIKE '%above100k%' AND P.product_pay > 100000
        )
    </if>
</select>
</mapper>